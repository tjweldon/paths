package main

import (
	"github.com/alexflint/go-arg"
	"os"
	"path/filepath"
	"strings"
	"tjweldon/paths/dumpers"
	"tjweldon/paths/fullpath"
)

const ConfigDirEnvVar = "PATHS_CONFIG_DIR"

var ConfigPath = func() string {
	confPath := os.Getenv(ConfigDirEnvVar)
	var err error
	if confPath == "" {
		confPath, err = os.UserConfigDir()
	}
	if err != nil {
		confPath, err = os.UserHomeDir()
	}
	if err != nil {
		confPath = "."
	}
	return filepath.FromSlash(confPath + "/paths.json")
}()

type DumpCmd struct{}

func (d DumpCmd) Run() (err error) {
	paths := (&fullpath.Paths{}).ReadEnv()
	dumper := dumpers.MakeDumper(dumpers.IndexedList(), dumpers.Stdout())
	err = dumper.Dump(paths)
	return err
}

type CreateConfigCmd struct{}

func (c CreateConfigCmd) Run() error {
	paths := (&fullpath.Paths{}).ReadEnv().Deduplicate()
	dumper := dumpers.MakeDumper(dumpers.Json(), dumpers.FileOverwrite(ConfigPath), dumpers.Stdout())
	err := dumper.Dump(paths)

	return err
}

type DumpConfigCmd struct{}

func (d *DumpConfigCmd) Run() error {
	paths, err := (&fullpath.Paths{}).ReadConfig(ConfigPath)
	if err != nil {
		return err
	}

	return dumpers.MakeDumper(dumpers.IndexedList(), dumpers.Stdout()).Dump(paths)
}

type InsertCmd struct {
	Path  string `arg:"positional"`
	Index int    `arg:"positional"`
}

func (i *InsertCmd) Run() error {
	paths, err := (&fullpath.Paths{}).ReadConfig(ConfigPath)
	if err != nil {
		return err
	}
	paths.Insert(i.Path, i.Index)

	return dumpers.NewMulti().
		AddDumper(dumpers.Json(), dumpers.FileOverwrite(ConfigPath)).
		AddDumper(dumpers.IndexedList(), dumpers.Stdout()).
		Dump(paths)
}

type RemoveCmd struct {
	Index int `arg:"positional"`
}

func (r *RemoveCmd) Run() error {
	paths, err := (&fullpath.Paths{}).ReadConfig(ConfigPath)
	if err != nil {
		return err
	}
	paths.Remove(r.Index)

	return dumpers.NewMulti().
		AddDumper(dumpers.Json(), dumpers.FileOverwrite(ConfigPath)).
		AddDumper(dumpers.IndexedList(), dumpers.Stdout()).
		Dump(paths)
}

type MoveCmd struct {
	Src int `arg:"positional"`
	Dst int `arg:"positional"`
}

func (m *MoveCmd) Run() error {
	paths, err := (&fullpath.Paths{}).ReadConfig(ConfigPath)
	if err != nil {
		return err
	}
	paths.Move(m.Src, m.Dst)

	return dumpers.NewMulti().
		AddDumper(dumpers.Json(), dumpers.FileOverwrite(ConfigPath)).
		AddDumper(dumpers.IndexedList(), dumpers.Stdout()).
		Dump(paths)
}

type SwapCmd struct {
	Src int `arg:"positional"`
	Dst int `arg:"positional"`
}

func (s *SwapCmd) Run() error {
	paths, err := (&fullpath.Paths{}).ReadConfig(ConfigPath)
	if err != nil {
		return err
	}
	paths.Swap(s.Src, s.Dst)

	return dumpers.NewMulti().
		AddDumper(dumpers.Json(), dumpers.FileOverwrite(ConfigPath)).
		AddDumper(dumpers.IndexedList(), dumpers.Stdout()).
		Dump(paths)
}

type ExportCmd struct{}

func (e *ExportCmd) Run() error {
	paths := (&fullpath.Paths{}).ReadEnv().Deduplicate()

	return dumpers.NewMulti().
		AddDumper(
			dumpers.ExportCommand(),
			dumpers.Stdout(),
		).Dump(paths)
}

type InstallCmd struct {
	Target string `arg:"positional"`
}

func (i *InstallCmd) Run() error {
	userMsgOut := dumpers.Stdout()
	_ = userMsgOut.Output("==> Deduplicating Paths and Creating configuration file at " + ConfigPath)
	err := (&CreateConfigCmd{}).Run()
	_ = userMsgOut.Output("==> Config generated!\n")

	if err != nil {
		return err
	}

	appender := dumpers.FileAppend(i.Target)
	lines := []string{
		"# This was autogenerated by paths. Modify the config dir to wherever you need it!",
		"export " + ConfigDirEnvVar + "='" + ConfigPath + "'",
		"eval \"$(paths export)\"",
		"",
	}
	snippet := strings.Join(lines, "\n")

	_ = userMsgOut.Output("==> Appending the following snippet to your targeted rc file:\n")
	_ = userMsgOut.Output(snippet + "\n")
	err = appender.Output(
		snippet,
	)
	if err != nil {
		return err
	}

	return userMsgOut.Output("==> Installation Successful!\n")
}

var args struct {
	CreateConfig *CreateConfigCmd `arg:"subcommand:create-config"`
	Dump         *DumpCmd         `arg:"subcommand:dump"`
	DumpConfig   *DumpConfigCmd   `arg:"subcommand:dump-config"`
	InsertCmd    *InsertCmd       `arg:"subcommand:insert"`
	RemoveCmd    *RemoveCmd       `arg:"subcommand:remove"`
	MoveCmd      *MoveCmd         `arg:"subcommand:move"`
	SwapCmd      *SwapCmd         `arg:"subcommand:swap"`
	ExportCmd    *ExportCmd       `arg:"subcommand:export"`
	InstallCmd   *InstallCmd      `arg:"subcommand:install"`
}

func main() {
	arg.MustParse(&args)
	var err error
	switch {
	case args.CreateConfig != nil:
		err = args.CreateConfig.Run()
	case args.Dump != nil:
		err = args.Dump.Run()
	case args.DumpConfig != nil:
		err = args.DumpConfig.Run()
	case args.InsertCmd != nil:
		err = args.InsertCmd.Run()
	case args.RemoveCmd != nil:
		err = args.RemoveCmd.Run()
	case args.MoveCmd != nil:
		err = args.MoveCmd.Run()
	case args.SwapCmd != nil:
		err = args.SwapCmd.Run()
	case args.ExportCmd != nil:
		err = args.ExportCmd.Run()
	case args.InstallCmd != nil:
		err = args.InstallCmd.Run()
	}

	if err != nil {
		panic(err)
	}
}
